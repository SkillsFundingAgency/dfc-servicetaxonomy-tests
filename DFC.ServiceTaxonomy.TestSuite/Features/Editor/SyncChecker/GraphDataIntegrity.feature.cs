// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFC.ServiceTaxonomy.TestSuite.Features.Editor.SyncChecker
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GraphDataIntegritity")]
    [NUnit.Framework.CategoryAttribute("webtest")]
    public partial class GraphDataIntegritityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GraphDataIntegrity.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GraphDataIntegritity", null, ProgrammingLanguage.CSharp, new string[] {
                        "webtest"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line 6
 testRunner.Given("I set up a data prefix for \"skos__prefLabel\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.Given("I logon to the editor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("I try to delete content type \"TestContentPicker1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And("I try to delete content type \"TestCollectionOfTypes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.Given("I add a new graph contentType called \"TestContentPicker1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Display Name",
                        "Type",
                        "Editor"});
            table46.AddRow(new string[] {
                        "Description",
                        "Html Field",
                        "Wysiwyg editor"});
#line 14
 testRunner.And("I add the following fields", ((string)(null)), table46, "And ");
#line 17
 testRunner.And("I save the contentItem", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.Given("I add a new graph contentType called \"TestCollectionOfTypes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Display Name",
                        "Type",
                        "Editor"});
            table47.AddRow(new string[] {
                        "Description",
                        "Html Field",
                        "Wysiwyg editor"});
            table47.AddRow(new string[] {
                        "PickContent",
                        "Content Picker Field",
                        ""});
#line 25
 testRunner.And("I add the following fields", ((string)(null)), table47, "And ");
#line 29
 testRunner.And("I edit the \"PickContent\" field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.And("I allow multiple items to be selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Content Type"});
            table48.AddRow(new string[] {
                        "TestContentPicker1"});
#line 31
 testRunner.And("I select the following items from the displayed list", ((string)(null)), table48, "And ");
#line 34
 testRunner.And("I save the contentItem", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.Given("I Navigate to \"/Admin/Contents/ContentTypes/TestContentPicker1/Create\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.And("I capture the generated URI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Description"});
            table49.AddRow(new string[] {
                        "My Test content",
                        "My test description"});
#line 40
 testRunner.And("I Enter the following form data for \"TestContentPicker1\"", ((string)(null)), table49, "And ");
#line 43
 testRunner.When("I publish the item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Given("I record the new documentId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.Then("the add action completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
 testRunner.Given("I Navigate to \"/Admin/Contents/ContentTypes/TestContentPicker1/Create\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
 testRunner.And("I capture the generated URI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Description"});
            table50.AddRow(new string[] {
                        "My Test content2",
                        "My test description2"});
#line 51
 testRunner.And("I Enter the following form data for \"TestContentPicker1\"", ((string)(null)), table50, "And ");
#line 54
 testRunner.When("I publish the item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Given("I record the new documentId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
 testRunner.Then("the add action completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Extra relationship")]
        [NUnit.Framework.CategoryAttribute("docker")]
        public virtual void ExtraRelationship()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extra relationship", null, new string[] {
                        "docker"});
#line 60
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line 63
 testRunner.Given("I Navigate to \"/Admin/Contents/ContentTypes/TestCollectionOfTypes/Create\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
 testRunner.And("I capture the generated URI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Description"});
            table51.AddRow(new string[] {
                        "My Test content",
                        "My test description"});
#line 66
 testRunner.And("I Enter the following form data for \"TestCollectionOfTypes\"", ((string)(null)), table51, "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Content"});
            table52.AddRow(new string[] {
                        "My Test content"});
#line 69
 testRunner.And("I pick content", ((string)(null)), table52, "And ");
#line 72
 testRunner.When("I publish the item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.Given("I record the new documentId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
 testRunner.Then("the add action completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
 testRunner.Given("I replace tokens in and then run the following graph update statement", "MATCH (a:ncs__TestCollectionOfTypes),(b:ncs__TestContentPicker1)\r\nWHERE a.uri = \'" +
                    "@URI3@\'\r\nand b.uri = \'@URI2@\'\r\nCREATE (a)-[r:hasTestContentPicker1]->(b)\r\nRETURN" +
                    " type(r)", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 86
  testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 87
  testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
  testRunner.And("I get the results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
  testRunner.Then("document 1 appears in the \"Validated\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 90
  testRunner.Then("document 2 appears in the \"Validated\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 91
  testRunner.And("document 3 appears in the \"Failed Validation\" section with message \"expecting 1 r" +
                    "elationships of type hasTestContentPicker1 in graph, but found 2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
  testRunner.And("document 3 appears in the \"Repaired\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
  testRunner.And("the following graph query returns 0 record", "MATCH (a:ncs__TestCollectionOfTypes)-[r:hasTestContentPicker1]->(b:ncs__TestConte" +
                    "ntPicker1)\r\nWHERE a.uri = \'@URI3@\'\r\nand b.uri = \'@URI2@\'\r\nRETURN count(a)", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Missing relationship")]
        public virtual void MissingRelationship()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Missing relationship", null, ((string[])(null)));
#line 102
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line 105
 testRunner.Given("I Navigate to \"/Admin/Contents/ContentTypes/TestCollectionOfTypes/Create\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 107
 testRunner.And("I capture the generated URI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Description"});
            table53.AddRow(new string[] {
                        "My Test content",
                        "My test description"});
#line 108
 testRunner.And("I Enter the following form data for \"TestCollectionOfTypes\"", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Content"});
            table54.AddRow(new string[] {
                        "My Test content"});
            table54.AddRow(new string[] {
                        "My Test content2"});
#line 111
 testRunner.And("I pick content", ((string)(null)), table54, "And ");
#line 115
 testRunner.When("I publish the item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
 testRunner.Given("I record the new documentId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 117
 testRunner.Then("the add action completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
 testRunner.Given("I replace tokens in and then run the following graph update statement", "MATCH (a:ncs__TestCollectionOfTypes)-[r]-(b:ncs__TestContentPicker1)\r\nWHERE a.uri" +
                    " = \'@URI3@\'\r\nand b.uri = \'@URI2@\'\r\nDELETE r", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 128
  testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 129
  testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
  testRunner.And("I get the results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
  testRunner.Then("document 1 appears in the \"Validated\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 132
  testRunner.Then("document 2 appears in the \"Validated\" section with message \"expecting 1 relations" +
                    "hips of type hasTestContentPicker1 in graph, but found 0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 133
  testRunner.And("document 3 appears in the \"Failed Validation\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
  testRunner.And("document 3 appears in the \"Repaired\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 135
  testRunner.And("the following graph query returns 1 record", "MATCH (a:ncs__TestCollectionOfTypes)-[r:hasTestContentPicker1]->(b:ncs__TestConte" +
                    "ntPicker1)\r\nWHERE a.uri = \'@URI3@\'\r\nand b.uri = \'@URI2@\'\r\nRETURN count(a)", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mistmatched label")]
        public virtual void MistmatchedLabel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mistmatched label", null, ((string[])(null)));
#line 143
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line 145
  testRunner.Given("I Navigate to \"/Admin/Contents/ContentTypes/TestCollectionOfTypes/Create\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 147
  testRunner.And("I capture the generated URI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Description"});
            table55.AddRow(new string[] {
                        "My Test content",
                        "My test description"});
#line 148
  testRunner.And("I Enter the following form data for \"TestCollectionOfTypes\"", ((string)(null)), table55, "And ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Content"});
            table56.AddRow(new string[] {
                        "My Test content"});
#line 151
  testRunner.And("I pick content", ((string)(null)), table56, "And ");
#line 154
  testRunner.When("I publish the item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 155
  testRunner.Given("I record the new documentId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 156
  testRunner.Then("the add action completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 159
  testRunner.Given("I replace tokens in and then run the following graph update statement", "   MERGE (a:ncs__TestCollectionOfTypes {uri: \'@URI3@\'})\r\n   SET a.ncs__Descriptio" +
                    "n = \'update value\'\r\n   RETURN a", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 165
  testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 166
  testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 167
  testRunner.And("I get the results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
  testRunner.Then("document 1 appears in the \"Validated\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 169
  testRunner.Then("document 2 appears in the \"Validated\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 170
  testRunner.And("document 3 appears in the \"Failed Validation\" section with message \"Description H" +
                    "tmlField did not validate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 171
  testRunner.And("document 3 appears in the \"Repaired\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 172
  testRunner.And("the following graph query returns 1 record", "MATCH (a:ncs__TestContentPicker1)\r\nWHERE a.uri = \'@URI2@\'\r\nAnd a.ncs__Description" +
                    " = \'My test description\'\r\nreturn count(a)", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Missing label")]
        public virtual void MissingLabel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Missing label", null, ((string[])(null)));
#line 180
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line 182
  testRunner.Given("I Navigate to \"/Admin/Contents/ContentTypes/TestCollectionOfTypes/Create\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 184
  testRunner.And("I capture the generated URI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Description"});
            table57.AddRow(new string[] {
                        "My Test content",
                        "My test description"});
#line 185
  testRunner.And("I Enter the following form data for \"TestCollectionOfTypes\"", ((string)(null)), table57, "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Content"});
            table58.AddRow(new string[] {
                        "My Test content"});
#line 188
  testRunner.And("I pick content", ((string)(null)), table58, "And ");
#line 191
  testRunner.When("I publish the item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 192
  testRunner.Given("I record the new documentId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 193
  testRunner.Then("the add action completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 196
  testRunner.Given("I replace tokens in and then run the following graph update statement", "MERGE (a:ncs__TestCollectionOfTypes {uri: \'@URI3@\'})\r\n  SET a = { uri :\'@URI3@\', " +
                    "skos__prefLabel : \'My Test content\' }\r\n  RETURN a", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 202
  testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 203
  testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 204
  testRunner.And("I get the results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
  testRunner.Then("document 1 appears in the \"Validated\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 206
  testRunner.Then("document 2 appears in the \"Validated\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 207
  testRunner.And("document 3 appears in the \"Failed Validation\" section with message \"Description H" +
                    "tmlField did not validate: node property value was null, but content property va" +
                    "lue was not null\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
  testRunner.And("document 3 appears in the \"Repaired\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 209
  testRunner.And("the following graph query returns 0 record", "MATCH (a:ncs__TestContentPicker1)\r\nWHERE a.uri = \'@URI2@\'\r\nAnd a.ncs__Description" +
                    "2 = \'new value\'\r\nreturn count(a)", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Missing Node")]
        public virtual void MissingNode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Missing Node", null, ((string[])(null)));
#line 217
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line 219
  testRunner.Given("I Navigate to \"/Admin/Contents/ContentTypes/TestCollectionOfTypes/Create\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 221
  testRunner.And("I capture the generated URI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Description"});
            table59.AddRow(new string[] {
                        "My Test content",
                        "My test description"});
#line 222
  testRunner.And("I Enter the following form data for \"TestCollectionOfTypes\"", ((string)(null)), table59, "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Content"});
            table60.AddRow(new string[] {
                        "My Test content"});
#line 225
  testRunner.And("I pick content", ((string)(null)), table60, "And ");
#line 228
  testRunner.When("I publish the item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 229
  testRunner.Given("I record the new documentId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 230
  testRunner.Then("the add action completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 233
  testRunner.Given("I replace tokens in and then run the following graph update statement", "MATCH (a:ncs__TestContentPicker1)\r\nWHERE a.uri = \'@URI2@\'\r\nDELETE a", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 240
   testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 241
   testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 242
   testRunner.And("I get the results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 243
   testRunner.Then("document 1 appears in the \"Validated\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 244
   testRunner.Then("document 3 appears in the \"Validated\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 245
   testRunner.And("document 2 appears in the \"Failed Validation\" section with message \"Node not foun" +
                    "d.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 246
   testRunner.And("document 2 appears in the \"Repaired\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 247
   testRunner.And("the following graph query returns 1 record", "MATCH (a:ncs__TestContentPicker1)\r\nWHERE a.uri = \'@URI2@\'\r\nreturn count(a)", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Missing Node and relationship")]
        public virtual void MissingNodeAndRelationship()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Missing Node and relationship", null, ((string[])(null)));
#line 254
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line 256
  testRunner.Given("I Navigate to \"/Admin/Contents/ContentTypes/TestCollectionOfTypes/Create\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 258
  testRunner.And("I capture the generated URI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Description"});
            table61.AddRow(new string[] {
                        "My Test content",
                        "My test description"});
#line 259
  testRunner.And("I Enter the following form data for \"TestCollectionOfTypes\"", ((string)(null)), table61, "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Content"});
            table62.AddRow(new string[] {
                        "My Test content"});
            table62.AddRow(new string[] {
                        "My Test content2"});
#line 262
  testRunner.And("I pick content", ((string)(null)), table62, "And ");
#line 266
  testRunner.When("I publish the item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 267
  testRunner.Given("I record the new documentId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 268
  testRunner.Then("the add action completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 271
  testRunner.Given("I replace tokens in and then run the following graph update statement", "MATCH (a:ncs__TestCollectionOfTypes)-[r]-(b:ncs__TestContentPicker1)\r\nWHERE a.uri" +
                    " = \'@URI3@\'\r\nand b.uri = \'@URI2@\'\r\nDELETE b,r", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 279
   testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 280
   testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 281
   testRunner.And("I get the results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 282
   testRunner.Then("document 1 appears in the \"Validated\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 283
   testRunner.And("document 2 appears in the \"Failed Validation\" section with message \"Node not foun" +
                    "d.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 284
   testRunner.And("document 3 appears in the \"Failed Validation\" section with message \"expecting 2 r" +
                    "elationships of type hasTestContentPicker1 in graph, but found 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 285
   testRunner.And("document 3 appears in the \"Repaired\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 286
   testRunner.And("document 3 appears in the \"Repaired\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 287
   testRunner.And("the following graph query returns 1 record", "MATCH (a:ncs__TestCollectionOfTypes)-[r]-(b:ncs__TestContentPicker1)\r\nWHERE a.uri" +
                    " = \'@URI3@\'\r\nand b.uri = \'@URI2@\'\r\nRETURN count(b)", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Missing parent and child Nodes and relationship")]
        public virtual void MissingParentAndChildNodesAndRelationship()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Missing parent and child Nodes and relationship", null, ((string[])(null)));
#line 295
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line 297
  testRunner.Given("I Navigate to \"/Admin/Contents/ContentTypes/TestCollectionOfTypes/Create\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 299
  testRunner.And("I capture the generated URI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Description"});
            table63.AddRow(new string[] {
                        "My Test content",
                        "My test description"});
#line 300
  testRunner.And("I Enter the following form data for \"TestCollectionOfTypes\"", ((string)(null)), table63, "And ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Content"});
            table64.AddRow(new string[] {
                        "My Test content"});
#line 303
  testRunner.And("I pick content", ((string)(null)), table64, "And ");
#line 306
  testRunner.When("I publish the item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 307
  testRunner.Given("I record the new documentId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 308
  testRunner.Then("the add action completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 311
  testRunner.Given("I replace tokens in and then run the following graph update statement", "MATCH (a:ncs__TestCollectionOfTypes)-[r]-(b:ncs__TestContentPicker1)\r\nWHERE a.uri" +
                    " = \'@URI3@\'\r\nand b.uri = \'@URI1@\'\r\nDETACH DELETE a,b", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 319
   testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 320
   testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 321
   testRunner.And("I get the results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 322
   testRunner.Then("document 2 appears in the \"Validated\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 323
   testRunner.Then("document 1 appears in the \"Failed Validation\" section with message \"Node not foun" +
                    "d.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 324
   testRunner.And("document 3 appears in the \"Failed Validation\" section with message \"Node not foun" +
                    "d.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 325
   testRunner.And("document 1 appears in the \"Repaired\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
   testRunner.And("document 3 appears in the \"Repaired\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 327
   testRunner.And("the following graph query returns 1 record", "MATCH (a:ncs__TestCollectionOfTypes)-[r]-(b:ncs__TestContentPicker1)\r\nWHERE a.uri" +
                    " = \'@URI3@\'\r\nand b.uri = \'@URI1@\'\r\nRETURN count (b)", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Extra node")]
        public virtual void ExtraNode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extra node", null, ((string[])(null)));
#line 334
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line 336
 testRunner.Given("I generate and store a new URI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 337
 testRunner.Given("I replace tokens in and then run the following graph update statement", "CREATE (a:ncs__TestContentPicker1 { uri: \'@URI3@\' , skos__prefLabel : \'Extra item" +
                    "\', ncs__Description : \'Test Description\'})\r\nRETURN a.name", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 342
 testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 343
 testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 344
 testRunner.And("I get the results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 345
 testRunner.Then("document 1 appears in the \"Validated\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 346
 testRunner.Then("document 2 appears in the \"Validated\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 347
 testRunner.Then("document 3 appears in the \"Failed Validation\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 349
 testRunner.And("document 3 appears in the \"Repaired\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 350
 testRunner.And("the following graph query returns 0 record", "MATCH (a:ncs__TestContentPicker1)\r\nWHERE a.uri = \'@URI3@\'\r\nRETURN count (b)", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

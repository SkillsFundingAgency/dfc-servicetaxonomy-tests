// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFC.ServiceTaxonomy.TestSuite.Features.Editor.SyncChecker
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ValidateAndRepair")]
    [NUnit.Framework.CategoryAttribute("webtest")]
    public partial class ValidateAndRepairFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "webtest"};
        
#line 1 "ValidateAndRepair.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ValidateAndRepair", null, ProgrammingLanguage.CSharp, new string[] {
                        "webtest"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("I set up a data prefix for \"skos__prefLabel\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.And("I logon to the editor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
 testRunner.And("I Navigate to \"/Admin/Contents/ContentTypes/SharedContent/Create\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.And("I capture the generated URI and tag it \"SharedContentUri\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table347 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Content"});
            table347.AddRow(new string[] {
                        "Draft Content",
                        "<p>Some draft content</p>"});
#line 10
 testRunner.And("I Enter the following form data for \"SharedContent\"", ((string)(null)), table347, "And ");
#line hidden
#line 13
 testRunner.When("I publish the item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then("the item is published succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.And("the data is present in the DRAFT Graph database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And("the data is present in the PUBLISH Graph database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.Given("I Navigate to \"/Admin/Contents/ContentTypes/Page/Create\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
 testRunner.And("I capture the generated URI and tag it \"PageUri\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table348 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table348.AddRow(new string[] {
                        "My Test Page"});
#line 20
 testRunner.And("I Enter the following form data for \"Page\"", ((string)(null)), table348, "And ");
#line hidden
#line 23
 testRunner.And("I select the default page location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.And("I add the \"__PREFIX__Draft Content\" shared content item to the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.When("I publish the item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then("the item is published succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table349 = new TechTalk.SpecFlow.Table(new string[] {
                        "skos__prefLabel",
                        "sharedContent"});
            table349.AddRow(new string[] {
                        "My Test Page",
                        "__PREFIX__Draft Content"});
#line 27
 testRunner.And("the \"preview\" graph matches the expect results using the \"page_with_shared_conten" +
                    "t\" query", ((string)(null)), table349, "And ");
#line hidden
            TechTalk.SpecFlow.Table table350 = new TechTalk.SpecFlow.Table(new string[] {
                        "skos__prefLabel",
                        "sharedContent"});
            table350.AddRow(new string[] {
                        "My Test Page",
                        "__PREFIX__Draft Content"});
#line 30
 testRunner.And("the \"publish\" graph matches the expect results using the \"page_with_shared_conten" +
                    "t\" query", ((string)(null)), table350, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Identify and repair a Missing Node in the preview graph")]
        [NUnit.Framework.CategoryAttribute("Editor")]
        public virtual void IdentifyAndRepairAMissingNodeInThePreviewGraph()
        {
            string[] tagsOfScenario = new string[] {
                    "Editor"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identify and repair a Missing Node in the preview graph", null, new string[] {
                        "Editor"});
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table351 = new TechTalk.SpecFlow.Table(new string[] {
                            "skos__prefLabel"});
                table351.AddRow(new string[] {
                            "My Test Page"});
#line 37
 testRunner.Then("the \"preview\" graph matches the expect results using the \"remove_widget\" query an" +
                        "d the \"PageUri\" Uri", ((string)(null)), table351, "Then ");
#line hidden
#line 40
 testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
 testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"publish\" and \"Validated\" se" +
                        "ction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"preview\" and \"Failed Valida" +
                        "tion\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
 testRunner.And("the document \"__PREFIX__My Test Page\" appears in the \"preview\" and \"Repaired\" sec" +
                        "tion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table352 = new TechTalk.SpecFlow.Table(new string[] {
                            "skos__prefLabel",
                            "sharedContent"});
                table352.AddRow(new string[] {
                            "My Test Page",
                            "__PREFIX__Draft Content"});
#line 45
 testRunner.And("the \"preview\" graph matches the expect results using the \"page_with_shared_conten" +
                        "t\" query and the \"PageUri\" Uri", ((string)(null)), table352, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Identify and repair a Missing Node in the publish graph")]
        [NUnit.Framework.CategoryAttribute("Editor")]
        public virtual void IdentifyAndRepairAMissingNodeInThePublishGraph()
        {
            string[] tagsOfScenario = new string[] {
                    "Editor"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identify and repair a Missing Node in the publish graph", null, new string[] {
                        "Editor"});
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table353 = new TechTalk.SpecFlow.Table(new string[] {
                            "skos__prefLabel"});
                table353.AddRow(new string[] {
                            "My Test Page"});
#line 52
 testRunner.Then("the \"publish\" graph matches the expect results using the \"remove_widget\" query an" +
                        "d the \"PageUri\" Uri", ((string)(null)), table353, "Then ");
#line hidden
#line 55
 testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 56
 testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"preview\" and \"Validated\" se" +
                        "ction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"publish\" and \"Failed Valida" +
                        "tion\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
 testRunner.And("the document \"__PREFIX__My Test Page\" appears in the \"publish\" and \"Repaired\" sec" +
                        "tion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table354 = new TechTalk.SpecFlow.Table(new string[] {
                            "skos__prefLabel",
                            "sharedContent"});
                table354.AddRow(new string[] {
                            "My Test Page",
                            "__PREFIX__Draft Content"});
#line 60
 testRunner.And("the \"publish\" graph matches the expect results using the \"page_with_shared_conten" +
                        "t\" query and the \"PageUri\" Uri", ((string)(null)), table354, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Identify and repair a Missing Relationship in the preview graph")]
        [NUnit.Framework.CategoryAttribute("Editor")]
        public virtual void IdentifyAndRepairAMissingRelationshipInThePreviewGraph()
        {
            string[] tagsOfScenario = new string[] {
                    "Editor"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identify and repair a Missing Relationship in the preview graph", null, new string[] {
                        "Editor"});
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table355 = new TechTalk.SpecFlow.Table(new string[] {
                            "skos__prefLabel"});
                table355.AddRow(new string[] {
                            "My Test Page"});
#line 67
 testRunner.Then("the \"preview\" graph matches the expect results using the \"remove_relationship_to_" +
                        "widget\" query and the \"PageUri\" Uri", ((string)(null)), table355, "Then ");
#line hidden
#line 70
 testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 71
 testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"publish\" and \"Validated\" se" +
                        "ction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"preview\" and \"Failed Valida" +
                        "tion\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
 testRunner.And("the document \"__PREFIX__My Test Page\" appears in the \"preview\" and \"Repaired\" sec" +
                        "tion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table356 = new TechTalk.SpecFlow.Table(new string[] {
                            "skos__prefLabel",
                            "sharedContent"});
                table356.AddRow(new string[] {
                            "My Test Page",
                            "__PREFIX__Draft Content"});
#line 75
 testRunner.And("the \"preview\" graph matches the expect results using the \"page_with_shared_conten" +
                        "t\" query and the \"PageUri\" Uri", ((string)(null)), table356, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Identify and repair a Missing Relationship in the publish graph")]
        [NUnit.Framework.CategoryAttribute("Editor")]
        public virtual void IdentifyAndRepairAMissingRelationshipInThePublishGraph()
        {
            string[] tagsOfScenario = new string[] {
                    "Editor"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identify and repair a Missing Relationship in the publish graph", null, new string[] {
                        "Editor"});
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table357 = new TechTalk.SpecFlow.Table(new string[] {
                            "skos__prefLabel"});
                table357.AddRow(new string[] {
                            "My Test Page"});
#line 82
 testRunner.Then("the \"publish\" graph matches the expect results using the \"remove_relationship_to_" +
                        "widget\" query and the \"PageUri\" Uri", ((string)(null)), table357, "Then ");
#line hidden
#line 85
 testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 86
 testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"preview\" and \"Validated\" se" +
                        "ction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"publish\" and \"Failed Valida" +
                        "tion\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
 testRunner.And("the document \"__PREFIX__My Test Page\" appears in the \"publish\" and \"Repaired\" sec" +
                        "tion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table358 = new TechTalk.SpecFlow.Table(new string[] {
                            "skos__prefLabel",
                            "sharedContent"});
                table358.AddRow(new string[] {
                            "My Test Page",
                            "__PREFIX__Draft Content"});
#line 90
 testRunner.And("the \"publish\" graph matches the expect results using the \"page_with_shared_conten" +
                        "t\" query and the \"PageUri\" Uri", ((string)(null)), table358, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Identify and repair a Missing Relationship Property in the preview graph")]
        [NUnit.Framework.CategoryAttribute("Editor")]
        public virtual void IdentifyAndRepairAMissingRelationshipPropertyInThePreviewGraph()
        {
            string[] tagsOfScenario = new string[] {
                    "Editor"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identify and repair a Missing Relationship Property in the preview graph", null, new string[] {
                        "Editor"});
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table359 = new TechTalk.SpecFlow.Table(new string[] {
                            "alignment",
                            "ordinal",
                            "size"});
                table359.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 97
 testRunner.Then("the \"preview\" graph matches the expect results using the \"remove_properties_from_" +
                        "page_to_widget_relationship\" query and the \"PageUri\" Uri", ((string)(null)), table359, "Then ");
#line hidden
#line 100
 testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 101
 testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"publish\" and \"Validated\" se" +
                        "ction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 103
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"preview\" and \"Failed Valida" +
                        "tion\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
 testRunner.And("the document \"__PREFIX__My Test Page\" appears in the \"preview\" and \"Repaired\" sec" +
                        "tion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table360 = new TechTalk.SpecFlow.Table(new string[] {
                            "alignment",
                            "ordinal",
                            "size"});
                table360.AddRow(new string[] {
                            "Justify",
                            "0",
                            "100"});
#line 105
 testRunner.And("the \"preview\" graph matches the expect results using the \"check_properties_for_pa" +
                        "ge_to_widget_relationship\" query and the \"PageUri\" Uri", ((string)(null)), table360, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Identify and repair a Missing Relationship Property in the publish graph")]
        [NUnit.Framework.CategoryAttribute("Editor")]
        public virtual void IdentifyAndRepairAMissingRelationshipPropertyInThePublishGraph()
        {
            string[] tagsOfScenario = new string[] {
                    "Editor"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identify and repair a Missing Relationship Property in the publish graph", null, new string[] {
                        "Editor"});
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table361 = new TechTalk.SpecFlow.Table(new string[] {
                            "alignment",
                            "ordinal",
                            "size"});
                table361.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 112
 testRunner.Then("the \"preview\" graph matches the expect results using the \"remove_properties_from_" +
                        "page_to_widget_relationship\" query and the \"PageUri\" Uri", ((string)(null)), table361, "Then ");
#line hidden
#line 115
 testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 116
 testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 117
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"publish\" and \"Validated\" se" +
                        "ction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 118
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"preview\" and \"Failed Valida" +
                        "tion\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
 testRunner.And("the document \"__PREFIX__My Test Page\" appears in the \"preview\" and \"Repaired\" sec" +
                        "tion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table362 = new TechTalk.SpecFlow.Table(new string[] {
                            "alignment",
                            "ordinal",
                            "size"});
                table362.AddRow(new string[] {
                            "Justify",
                            "0",
                            "100"});
#line 120
 testRunner.And("the \"preview\" graph matches the expect results using the \"check_properties_for_pa" +
                        "ge_to_widget_relationship\" query and the \"PageUri\" Uri", ((string)(null)), table362, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Identify and repair a mismatching Relationship Property in the preview graph")]
        [NUnit.Framework.CategoryAttribute("Editor")]
        public virtual void IdentifyAndRepairAMismatchingRelationshipPropertyInThePreviewGraph()
        {
            string[] tagsOfScenario = new string[] {
                    "Editor"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identify and repair a mismatching Relationship Property in the preview graph", null, new string[] {
                        "Editor"});
#line 125
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table363 = new TechTalk.SpecFlow.Table(new string[] {
                            "alignment",
                            "ordinal",
                            "size"});
                table363.AddRow(new string[] {
                            "xxx",
                            "yyy",
                            "zzz"});
#line 127
 testRunner.Then("the \"preview\" graph matches the expect results using the \"update_properties_for_p" +
                        "age_to_widget_relationship\" query and the \"PageUri\" Uri", ((string)(null)), table363, "Then ");
#line hidden
#line 130
 testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 131
 testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"publish\" and \"Validated\" se" +
                        "ction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 133
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"preview\" and \"Failed Valida" +
                        "tion\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 134
 testRunner.And("the document \"__PREFIX__My Test Page\" appears in the \"preview\" and \"Repaired\" sec" +
                        "tion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table364 = new TechTalk.SpecFlow.Table(new string[] {
                            "alignment",
                            "ordinal",
                            "size"});
                table364.AddRow(new string[] {
                            "Justify",
                            "0",
                            "100"});
#line 135
 testRunner.And("the \"preview\" graph matches the expect results using the \"check_properties_for_pa" +
                        "ge_to_widget_relationship\" query and the \"PageUri\" Uri", ((string)(null)), table364, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Identify and repair a mismatching Relationship Property in the publish graph")]
        [NUnit.Framework.CategoryAttribute("Editor")]
        public virtual void IdentifyAndRepairAMismatchingRelationshipPropertyInThePublishGraph()
        {
            string[] tagsOfScenario = new string[] {
                    "Editor"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identify and repair a mismatching Relationship Property in the publish graph", null, new string[] {
                        "Editor"});
#line 140
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table365 = new TechTalk.SpecFlow.Table(new string[] {
                            "alignment",
                            "ordinal",
                            "size"});
                table365.AddRow(new string[] {
                            "xxx",
                            "yyy",
                            "zzz"});
#line 142
 testRunner.Then("the \"publish\" graph matches the expect results using the \"update_properties_for_p" +
                        "age_to_widget_relationship\" query and the \"PageUri\" Uri", ((string)(null)), table365, "Then ");
#line hidden
#line 145
 testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 146
 testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"preview\" and \"Validated\" se" +
                        "ction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 148
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"publish\" and \"Failed Valida" +
                        "tion\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 149
 testRunner.And("the document \"__PREFIX__My Test Page\" appears in the \"publish\" and \"Repaired\" sec" +
                        "tion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table366 = new TechTalk.SpecFlow.Table(new string[] {
                            "alignment",
                            "ordinal",
                            "size"});
                table366.AddRow(new string[] {
                            "Justify",
                            "0",
                            "100"});
#line 150
 testRunner.And("the \"publish\" graph matches the expect results using the \"check_properties_for_pa" +
                        "ge_to_widget_relationship\" query and the \"PageUri\" Uri", ((string)(null)), table366, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Identify and repair an unexpected Relationship Property in the preview graph")]
        [NUnit.Framework.CategoryAttribute("Editor")]
        public virtual void IdentifyAndRepairAnUnexpectedRelationshipPropertyInThePreviewGraph()
        {
            string[] tagsOfScenario = new string[] {
                    "Editor"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identify and repair an unexpected Relationship Property in the preview graph", null, new string[] {
                        "Editor"});
#line 156
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table367 = new TechTalk.SpecFlow.Table(new string[] {
                            "alignment",
                            "ordinal",
                            "size",
                            "additional"});
                table367.AddRow(new string[] {
                            "Justify",
                            "0",
                            "100",
                            "xxx"});
#line 158
 testRunner.Then("the \"preview\" graph matches the expect results using the \"add_property_to_page_to" +
                        "_widget_relationship\" query and the \"PageUri\" Uri", ((string)(null)), table367, "Then ");
#line hidden
#line 161
 testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 162
 testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 163
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"publish\" and \"Validated\" se" +
                        "ction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 164
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"preview\" and \"Failed Valida" +
                        "tion\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 165
 testRunner.And("the document \"__PREFIX__My Test Page\" appears in the \"preview\" and \"Repaired\" sec" +
                        "tion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table368 = new TechTalk.SpecFlow.Table(new string[] {
                            "alignment",
                            "ordinal",
                            "size",
                            "additional"});
                table368.AddRow(new string[] {
                            "Justify",
                            "0",
                            "100",
                            ""});
#line 166
 testRunner.And("the \"preview\" graph matches the expect results using the \"check_for_additional_pr" +
                        "operties_on_page_to_widget_relationship\" query and the \"PageUri\" Uri", ((string)(null)), table368, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Identify and repair an unexpected Relationship Property in the publish graph")]
        [NUnit.Framework.CategoryAttribute("Editor")]
        public virtual void IdentifyAndRepairAnUnexpectedRelationshipPropertyInThePublishGraph()
        {
            string[] tagsOfScenario = new string[] {
                    "Editor"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identify and repair an unexpected Relationship Property in the publish graph", null, new string[] {
                        "Editor"});
#line 171
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table369 = new TechTalk.SpecFlow.Table(new string[] {
                            "alignment",
                            "ordinal",
                            "size",
                            "additional"});
                table369.AddRow(new string[] {
                            "Justify",
                            "0",
                            "100",
                            "xxx"});
#line 173
 testRunner.Then("the \"publish\" graph matches the expect results using the \"add_property_to_page_to" +
                        "_widget_relationship\" query and the \"PageUri\" Uri", ((string)(null)), table369, "Then ");
#line hidden
#line 176
 testRunner.Given("I run the sync check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 177
 testRunner.And("the sync completes succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"preview\" and \"Validated\" se" +
                        "ction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 179
 testRunner.Then("the document \"__PREFIX__My Test Page\" appears in the \"publish\" and \"Failed Valida" +
                        "tion\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 180
 testRunner.And("the document \"__PREFIX__My Test Page\" appears in the \"publish\" and \"Repaired\" sec" +
                        "tion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table370 = new TechTalk.SpecFlow.Table(new string[] {
                            "alignment",
                            "ordinal",
                            "size",
                            "additional"});
                table370.AddRow(new string[] {
                            "Justify",
                            "0",
                            "100",
                            ""});
#line 181
 testRunner.And("the \"publish\" graph matches the expect results using the \"check_for_additional_pr" +
                        "operties_on_page_to_widget_relationship\" query and the \"PageUri\" Uri", ((string)(null)), table370, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

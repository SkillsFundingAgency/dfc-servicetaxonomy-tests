// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFC.ServiceTaxonomy.TestSuite.Features.API
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GetSkillsGapForOccupationAndGivenSkills")]
    public partial class GetSkillsGapForOccupationAndGivenSkillsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "GetSkillsGapForOccupationAndGivenSkills.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GetSkillsGapForOccupationAndGivenSkills", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Occupation is supplied with a skill list which has some commonality")]
        [NUnit.Framework.CategoryAttribute("GetSkillsGapOforOccupationAndGivenSkills")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void OccupationIsSuppliedWithASkillListWhichHasSomeCommonality()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsGapOforOccupationAndGivenSkills",
                    "todo"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Occupation is supplied with a skill list which has some commonality", null, new string[] {
                        "GetSkillsGapOforOccupationAndGivenSkills",
                        "todo"});
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("I make a request to the service taxonomy API \"getskillsgapforoccupationandgivensk" +
                        "ills\" with request body", @"{
  ""occupation"": ""http://data.europa.eu/esco/occupation/a7a74a05-3dd0-46c6-99af-92df8042520c"",
  ""skillList"": [
    ""http://data.europa.eu/esco/skill/0ee7b0d6-db98-4785-9948-f2ef415d155a"",
    ""http://data.europa.eu/esco/skill/0bc42cda-a6f0-4cac-9b34-7911faba0bd4""
  ]
}
", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
 testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
    testRunner.And("the response json has collection \"missingSkills\" with an item matching", @"{
        ""relationshipType"": ""essential"",
        ""skill"": ""gather experimental data"",
        ""lastModified"": ""2016-12-20T20:24:44Z"",
        ""alternativeLabels"": [
            ""collect experimental data"",
            ""accumulate experimental data"",
            ""experimental data gathering"",
            ""compile experimental data"",
            ""gathering of experimental data""
        ],
        ""type"": ""competency"",
        ""uri"": ""http://data.europa.eu/esco/skill/89db623e-e1fc-4ec2-9a0f-7b72b4c35303"",
        ""skillReusability"": ""cross-sectoral""
    }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
    testRunner.And("the response json has collection \"missingSkills\" with an item matching", @"     {
         ""relationshipType"": ""optional"",
         ""skill"": ""helminthology"",
         ""lastModified"": ""2016-12-20T20:22:40Z"",
         ""alternativeLabels"": [
             ""parasitic worms studies"",
             ""the study of parasitic worms""
         ],
         ""type"": ""knowledge"",
         ""uri"": ""http://data.europa.eu/esco/skill/b3f74d7d-82d6-48e0-8460-219b4aa5dcaa"",
         ""skillReusability"": ""occupation-specific""
     }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
    testRunner.And("the response json has collection \"matchingSkills\" with an item matching", @"     {
         ""relationshipType"": ""optional"",
         ""skill"": ""write research proposals"",
         ""lastModified"": ""2016-10-20T10:15:31Z"",
         ""alternativeLabels"": [],
         ""type"": ""competency"",
         ""uri"": ""http://data.europa.eu/esco/skill/0ee7b0d6-db98-4785-9948-f2ef415d155a"",
         ""skillReusability"": ""cross-sectoral""
     }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
   testRunner.And("the count of collection \"missingSkills\" is 47", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
   testRunner.And("the element \"uri\" in the collection \"missingSkills\" has distinct values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
   testRunner.And("the response json has collection \"missingSkills\" with an item matching", @"{
         ""relationshipType"": ""essential"",
         ""skill"": ""conduct research on flora"",
         ""lastModified"": ""2016-12-20T20:26:33Z"",
         ""alternativeLabels"": [
             ""perform research on flora"",
             ""carry out research on flora"",
             ""flora research"",
             ""run research on flora"",
             ""research on flora""
         ],
         ""type"": ""competency"",
         ""uri"": ""http://data.europa.eu/esco/skill/0058526a-11e9-40a1-ab33-7c5ffdf5da05"",
         ""skillReusability"": ""sector-specific""
     }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
   testRunner.And("the response json has collection \"missingSkills\" with an item matching", @"{
         ""relationshipType"": ""essential"",
         ""skill"": ""collect biological data"",
         ""lastModified"": ""2016-12-20T17:31:28Z"",
         ""alternativeLabels"": [
             ""analyse biological records"",
             ""collecting biological data"",
             ""biological data collecting"",
             ""analysing biological records"",
             ""collecting biological records"",
             ""analyse biological data"",
             ""biological data analysing"",
             ""collect biological records"",
             ""analysing biological data""
         ],
         ""type"": ""competency"",
         ""uri"": ""http://data.europa.eu/esco/skill/e3fcd642-5f9c-48ee-be58-258dd895d281"",
         ""skillReusability"": ""cross-sectoral""
     }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
   testRunner.And("the response json has collection \"missingSkills\" with an item matching", @"     {
         ""relationshipType"": ""essential"",
         ""skill"": ""apply scientific methods"",
         ""lastModified"": ""2017-01-05T10:54:11Z"",
         ""alternativeLabels"": [
             ""utilise scientific methods"",
             ""employ scientific methods"",
             ""apply a scientific method"",
             ""administer scientific methods"",
             ""implement scientific methods"",
             ""apply scientific methodology""
         ],
         ""type"": ""competency"",
         ""uri"": ""http://data.europa.eu/esco/skill/7a34b3d9-bd3b-4f4e-a0f6-f97439901cb7"",
         ""skillReusability"": ""cross-sectoral""
     }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
   testRunner.And("the response json has collection \"missingSkills\" with an item matching", @"    {
         ""relationshipType"": ""optional"",
         ""skill"": ""develop bioremediation techniques"",
         ""lastModified"": ""2016-12-20T20:25:58Z"",
         ""alternativeLabels"": [
             ""prepare bioremediation techniques"",
             ""developing bioremediation technique"",
             ""compile bioremediation techniques define bioremediation techniques"",
             ""create bioremediation techniques"",
             ""developing bioremediation techniques""
         ],
         ""type"": ""competency"",
         ""uri"": ""http://data.europa.eu/esco/skill/23cb29ec-5738-4966-8453-09952ed8c1fc"",
         ""skillReusability"": ""occupation-specific""
     }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
   testRunner.And("the count of collection \"matchingSkills\" is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
   testRunner.And("the element \"uri\" in the collection \"matchingSkills\" has distinct values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Occupation is supplied with a skill list including a matching skill with no alter" +
            "nate labels")]
        [NUnit.Framework.CategoryAttribute("GetSkillsGapOforOccupationAndGivenSkills")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void OccupationIsSuppliedWithASkillListIncludingAMatchingSkillWithNoAlternateLabels()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsGapOforOccupationAndGivenSkills",
                    "todo"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Occupation is supplied with a skill list including a matching skill with no alter" +
                    "nate labels", null, new string[] {
                        "GetSkillsGapOforOccupationAndGivenSkills",
                        "todo"});
#line 151
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 153
 testRunner.Given("I make a request to the service taxonomy API \"getskillsgapforoccupationandgivensk" +
                        "ills\" with request body", @"{
  ""occupation"": ""http://data.europa.eu/esco/occupation/a7a74a05-3dd0-46c6-99af-92df8042520c"",
  ""skillList"": [
    ""http://data.europa.eu/esco/skill/0ee7b0d6-db98-4785-9948-f2ef415d155a"",
    ""http://data.europa.eu/esco/skill/0bc42cda-a6f0-4cac-9b34-7911faba0bd4""
  ]
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 163
    testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 164
    testRunner.And("the response json has collection \"matchingSkills\" with an item matching", @"     {
         ""relationshipType"": ""optional"",
         ""skill"": ""write research proposals"",
         ""lastModified"": ""2016-10-20T10:15:31Z"",
         ""alternativeLabels"": [],
         ""type"": ""competency"",
         ""uri"": ""http://data.europa.eu/esco/skill/0ee7b0d6-db98-4785-9948-f2ef415d155a"",
         ""skillReusability"": ""cross-sectoral""
     }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 176
    testRunner.And("the response json has collection \"matchingSkills\" with an item matching", @"    {
        ""relationshipType"": ""essential"",
        ""skill"": ""microbiology-bacteriology"",
        ""lastModified"": ""2016-12-20T19:31:41Z"",
        ""alternativeLabels"": [
            ""characteristics of micobioloy"",
            ""principles of microbiology"",
            ""specialties of bacteria"",
            ""study of bacteria"",
            ""bacteriology and microbiology"",
            ""microbiology"",
            ""science of bacteria"",
            ""study of microscopic organisms"",
            ""study of microbiology"",
            ""classification and characteristics of bacteria"",
            ""microbiology-bacteriologies"",
            ""bacteriology"",
            ""micro-biology""
        ],
        ""type"": ""knowledge"",
        ""uri"": ""http://data.europa.eu/esco/skill/0bc42cda-a6f0-4cac-9b34-7911faba0bd4"",
        ""skillReusability"": ""sector-specific""
    }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 202
   testRunner.And("the count of collection \"matchingSkills\" is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 203
   testRunner.And("the count of collection \"missingSkills\" is 47", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Occupation is supplied with a skill list including no matching skills")]
        [NUnit.Framework.CategoryAttribute("GetSkillsGapOforOccupationAndGivenSkills")]
        public virtual void OccupationIsSuppliedWithASkillListIncludingNoMatchingSkills()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsGapOforOccupationAndGivenSkills"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Occupation is supplied with a skill list including no matching skills", null, new string[] {
                        "GetSkillsGapOforOccupationAndGivenSkills"});
#line 209
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 211
 testRunner.Given("I make a request to the service taxonomy API \"getskillsgapforoccupationandgivensk" +
                        "ills\" with request body", "{\r\n  \"occupation\": \"http://data.europa.eu/esco/occupation/a7a74a05-3dd0-46c6-99af" +
                        "-92df8042520c\",\r\n  \"skillList\": [\r\n    \"http://data.europa.eu/esco/nonmatchingsk" +
                        "ill/0ee7b0d6-db98-4785-9948-f2ef415d155a\"\r\n  ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 220
    testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 221
    testRunner.And("the count of collection \"matchingSkills\" is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 222
    testRunner.And("the count of collection \"missingSkills\" is 49", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unknown occupation is supplied")]
        [NUnit.Framework.CategoryAttribute("GetSkillsGapOforOccupationAndGivenSkills")]
        public virtual void UnknownOccupationIsSupplied()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsGapOforOccupationAndGivenSkills"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unknown occupation is supplied", null, new string[] {
                        "GetSkillsGapOforOccupationAndGivenSkills"});
#line 226
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 227
 testRunner.Given("I make a request to the service taxonomy API \"getskillsgapforoccupationandgivensk" +
                        "ills\" with request body", @"{
  ""occupation"": ""http://data.europa.eu/esco/Invalidoccupation/a7a74a05-3dd0-46c6-99af-92df8042520c"",
  ""skillList"": [
    ""http://data.europa.eu/esco/skill/0058526a-11e9-40a1-ab33-7c5ffdf5da05"",
	""http://data.europa.eu/esco/skill/e3fcd642-5f9c-48ee-be58-258dd895d281"",
	""http://data.europa.eu/esco/skill/7a34b3d9-bd3b-4f4e-a0f6-f97439901cb7"",
	""http://data.europa.eu/esco/skill/23cb29ec-5738-4966-8453-09952ed8c1fc"",
	""http://data.europa.eu/esco/skill/e3fcd642-5f9c-48ee-be58-258dd895d281""
  ]
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 240
    testRunner.Then("the response code is 204", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No body is supplied")]
        [NUnit.Framework.CategoryAttribute("GetSkillsGapOforOccupationAndGivenSkills")]
        public virtual void NoBodyIsSupplied()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsGapOforOccupationAndGivenSkills"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No body is supplied", null, new string[] {
                        "GetSkillsGapOforOccupationAndGivenSkills"});
#line 245
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "dataItem",
                            "value"});
#line 246
 testRunner.Given("I make a request to the service taxonomy API \"getskillsgapforoccupationandgivensk" +
                        "ills\"", ((string)(null)), table40, "Given ");
#line hidden
#line 248
    testRunner.Then("the response code is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 249
    testRunner.And("the the response message is \"Unable to process supplied parameters\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid body is supplied")]
        [NUnit.Framework.CategoryAttribute("GetSkillsGapOforOccupationAndGivenSkills")]
        public virtual void InvalidBodyIsSupplied()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsGapOforOccupationAndGivenSkills"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid body is supplied", null, new string[] {
                        "GetSkillsGapOforOccupationAndGivenSkills"});
#line 253
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "dataItem",
                            "value"});
                table41.AddRow(new string[] {
                            "skill",
                            "http://data.europa.eu/esco/skill/4d97e3c3-f335-47cc-a4ee-0d779fd42222"});
#line 254
 testRunner.Given("I make a request to the service taxonomy API \"getskillsgapforoccupationandgivensk" +
                        "ills\"", ((string)(null)), table41, "Given ");
#line hidden
#line 257
    testRunner.Then("the response code is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 258
    testRunner.And("the the response message is \"Unable to process supplied parameters\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid security header is supplied")]
        [NUnit.Framework.CategoryAttribute("GetSkillsGapOforOccupationAndGivenSkills")]
        public virtual void InvalidSecurityHeaderIsSupplied()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsGapOforOccupationAndGivenSkills"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid security header is supplied", null, new string[] {
                        "GetSkillsGapOforOccupationAndGivenSkills"});
#line 263
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 264
    testRunner.Given("I want to supply an invalid security header", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "dataItem",
                            "value"});
                table42.AddRow(new string[] {
                            "skill",
                            "http://data.europa.eu/esco/skill/4d97e3c3-f335-47cc-a4ee-0d779fd42222"});
#line 265
 testRunner.And("I make a request to the service taxonomy API \"getskillsgapforoccupationandgivensk" +
                        "ills\"", ((string)(null)), table42, "And ");
#line hidden
#line 268
    testRunner.Then("the response code is 401", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 269
    testRunner.And("the response json matches:", "   {\r\n   \"statusCode\": 401,\r\n   \"message\": \"Access denied due to invalid subscrip" +
                        "tion key. Make sure to provide a valid key for an active subscription.\"\r\n   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Missing security header")]
        [NUnit.Framework.CategoryAttribute("GetSkillsGapOforOccupationAndGivenSkills")]
        public virtual void MissingSecurityHeader()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsGapOforOccupationAndGivenSkills"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Missing security header", null, new string[] {
                        "GetSkillsGapOforOccupationAndGivenSkills"});
#line 279
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 280
    testRunner.Given("I want to fail to send a security header", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "dataItem",
                            "value"});
                table43.AddRow(new string[] {
                            "skill",
                            "http://data.europa.eu/esco/skill/4d97e3c3-f335-47cc-a4ee-0d779fd42222"});
#line 281
 testRunner.And("I make a request to the service taxonomy API \"getskillsgapforoccupationandgivensk" +
                        "ills\"", ((string)(null)), table43, "And ");
#line hidden
#line 284
    testRunner.Then("the response code is 401", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 285
    testRunner.And("the response json matches:", "   {\r\n   \"statusCode\": 401,\r\n   \"message\": \"Access denied due to missing subscrip" +
                        "tion key. Make sure to include subscription key when making requests to an API.\"" +
                        "\r\n   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

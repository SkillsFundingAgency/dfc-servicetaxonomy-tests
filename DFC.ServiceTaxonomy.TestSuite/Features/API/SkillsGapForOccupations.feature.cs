// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFC.ServiceTaxonomy.TestSuite.Features.API
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SkillsGapForOccupations")]
    public partial class SkillsGapForOccupationsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SkillsGapForOccupations.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SkillsGapForOccupations", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Skills gap analysis where common skills exists")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void SkillsGapAnalysisWhereCommonSkillsExists()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skills gap analysis where common skills exists", null, new string[] {
                        "Ignore"});
#line 5
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
    testRunner.Given("I request skills gap anaylsis for occupations \"123\" and \"234\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.Then("", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Skills gap analysis where no common skills exists")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void SkillsGapAnalysisWhereNoCommonSkillsExists()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skills gap analysis where no common skills exists", null, new string[] {
                        "Ignore"});
#line 10
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Skills gap where a skill is essential for Occupation 1 and optional for Occupatio" +
            "n 2")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void SkillsGapWhereASkillIsEssentialForOccupation1AndOptionalForOccupation2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skills gap where a skill is essential for Occupation 1 and optional for Occupatio" +
                    "n 2", null, new string[] {
                        "Ignore"});
#line 13
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Skills gap where a skill is optional for Occupation 1 and essential for Occupatio" +
            "n 2")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void SkillsGapWhereASkillIsOptionalForOccupation1AndEssentialForOccupation2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skills gap where a skill is optional for Occupation 1 and essential for Occupatio" +
                    "n 2", null, new string[] {
                        "Ignore"});
#line 16
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Skills gap where a skill is essential for Occupation 1 and  Occupation 2")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void SkillsGapWhereASkillIsEssentialForOccupation1AndOccupation2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skills gap where a skill is essential for Occupation 1 and  Occupation 2", null, new string[] {
                        "Ignore"});
#line 19
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Skills gap where a skill is optional for Occupation 1 and  Occupation 2")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void SkillsGapWhereASkillIsOptionalForOccupation1AndOccupation2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skills gap where a skill is optional for Occupation 1 and  Occupation 2", null, new string[] {
                        "Ignore"});
#line 22
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Skills gap where a skill is essential for Occupation 1 and not related to Occupat" +
            "ion 2")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void SkillsGapWhereASkillIsEssentialForOccupation1AndNotRelatedToOccupation2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skills gap where a skill is essential for Occupation 1 and not related to Occupat" +
                    "ion 2", null, new string[] {
                        "Ignore"});
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Skills gap where a skill is optional for Occupation 1 and not related to Occupati" +
            "on 2")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void SkillsGapWhereASkillIsOptionalForOccupation1AndNotRelatedToOccupation2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skills gap where a skill is optional for Occupation 1 and not related to Occupati" +
                    "on 2", null, new string[] {
                        "Ignore"});
#line 28
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Skills gap where a skill with transverse reusability is identified as a gap")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void SkillsGapWhereASkillWithTransverseReusabilityIsIdentifiedAsAGap()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skills gap where a skill with transverse reusability is identified as a gap", null, new string[] {
                        "Ignore"});
#line 31
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Skills gap where a skill with cross sectoral reusability is identified as a gap")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void SkillsGapWhereASkillWithCrossSectoralReusabilityIsIdentifiedAsAGap()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skills gap where a skill with cross sectoral reusability is identified as a gap", null, new string[] {
                        "Ignore"});
#line 34
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Skills gap where a skill with sector secific reusability is identified as a gap")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void SkillsGapWhereASkillWithSectorSecificReusabilityIsIdentifiedAsAGap()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skills gap where a skill with sector secific reusability is identified as a gap", null, new string[] {
                        "Ignore"});
#line 37
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Skills gap where a skill with occupation secific reusability is identified as a g" +
            "ap")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void SkillsGapWhereASkillWithOccupationSecificReusabilityIsIdentifiedAsAGap()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skills gap where a skill with occupation secific reusability is identified as a g" +
                    "ap", null, new string[] {
                        "Ignore"});
#line 40
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Skills gap analysis where first occupation is invalid")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void SkillsGapAnalysisWhereFirstOccupationIsInvalid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skills gap analysis where first occupation is invalid", null, new string[] {
                        "Ignore"});
#line 43
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Skills gap analysis where second occupation is invalid")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void SkillsGapAnalysisWhereSecondOccupationIsInvalid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skills gap analysis where second occupation is invalid", null, new string[] {
                        "Ignore"});
#line 46
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Skills gap analysis where both occupations are invalid")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void SkillsGapAnalysisWhereBothOccupationsAreInvalid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skills gap analysis where both occupations are invalid", null, new string[] {
                        "Ignore"});
#line 49
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Missing security header")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void MissingSecurityHeader()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Missing security header", null, new string[] {
                        "Ignore"});
#line 52
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid security header")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void InvalidSecurityHeader()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid security header", null, new string[] {
                        "Ignore"});
#line 55
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

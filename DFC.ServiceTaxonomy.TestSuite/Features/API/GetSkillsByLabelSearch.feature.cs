// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFC.ServiceTaxonomy.TestSuite.Features.API
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GetSkillsByLabelSearch")]
    public partial class GetSkillsByLabelSearchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "GetSkillsByLabelSearch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GetSkillsByLabelSearch", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for a full word")]
        public virtual void SearchForAFullWord()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for a full word", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\" with reques" +
                        "t body", "{\r\n  \"label\": \"torch\",\r\n  \"matchAltLabels\": \"true\"\r\n}\r\n", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 15
 testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
    testRunner.And("the response json matches:", "{\r\n\"skills\": [\r\n{\r\n   \"skillType\": \"competency\",\r\n   \"skill\": \"operate brazing eq" +
                        "uipment\",\r\n   \"lastModified\": \"2016-12-20T19:49:34Z\",\r\n   \"alternativeLabels\": [" +
                        "\r\n       \"use welding torches\",\r\n       \"use brazing equipment\",\r\n       \"handle" +
                        " brazing equipment\",\r\n       \"run brazing equipment\",\r\n       \"utilise welding t" +
                        "orches\",\r\n       \"run welding torches\",\r\n       \"utilise brazing equipment\",\r\n  " +
                        "     \"handle welding torches\"\r\n   ],\r\n   \"uri\": \"http://data.europa.eu/esco/skil" +
                        "l/10f24e0d-bd23-4432-b96b-e9f23136c503\",\r\n   \"matches\": {\r\n       \"hiddenLabels\"" +
                        ": [],\r\n       \"skill\": [],\r\n       \"alternativeLabels\": [\r\n           \"use weldi" +
                        "ng torches\",\r\n           \"utilise welding torches\",\r\n           \"run welding tor" +
                        "ches\",\r\n           \"handle welding torches\"\r\n       ]\r\n   },\r\n   \"skillReusabili" +
                        "ty\": \"cross-sectoral\"\r\n},\r\n{\r\n   \"skillType\": \"knowledge\",\r\n   \"skill\": \"torch t" +
                        "emperature for metal processes\",\r\n   \"lastModified\": \"2017-01-05T13:52:33Z\",\r\n  " +
                        " \"alternativeLabels\": [\r\n       \"torch temperature for metal working\",\r\n       \"" +
                        "torch temperature for metal procedures\",\r\n       \"correct heat for machine and t" +
                        "ool operations\",\r\n       \"torch temperature for metal operations\",\r\n       \"corr" +
                        "ect heat for machine and tool working\",\r\n       \"torch temperature for metal act" +
                        "ivities\",\r\n       \"correct heat for machine and tool activities\",\r\n       \"corre" +
                        "ct heat for machine and tool procedures\"\r\n   ],\r\n   \"uri\": \"http://data.europa.e" +
                        "u/esco/skill/46f2796e-e1b8-4210-95e2-d9a89af956e7\",\r\n   \"matches\": {\r\n       \"hi" +
                        "ddenLabels\": [],\r\n       \"skill\": [\r\n           \"torch temperature for metal pro" +
                        "cesses\"\r\n       ],\r\n       \"alternativeLabels\": [\r\n           \"torch temperature" +
                        " for metal working\",\r\n           \"torch temperature for metal procedures\",\r\n    " +
                        "       \"torch temperature for metal operations\",\r\n           \"torch temperature " +
                        "for metal activities\"\r\n       ]\r\n   },\r\n   \"skillReusability\": \"cross-sectoral\"\r" +
                        "\n},\r\n{\r\n   \"skillType\": \"competency\",\r\n   \"skill\": \"operate oxy-fuel cutting tor" +
                        "ch\",\r\n   \"lastModified\": \"2016-12-20T19:48:21Z\",\r\n   \"alternativeLabels\": [\r\n   " +
                        "    \"utilise oxyacetylene cutter\",\r\n       \"handle oxy-fuel cutting torch\",\r\n   " +
                        "    \"utilise oxy-fuel cutting torch\",\r\n       \"use oxy-fuel cutting torch\",\r\n   " +
                        "    \"run oxy-fuel cutting torch\",\r\n       \"use oxyacetylene cutter\",\r\n       \"ha" +
                        "ndle oxyacetylene cutter\",\r\n       \"run oxyacetylene cutter\"\r\n   ],\r\n   \"uri\": \"" +
                        "http://data.europa.eu/esco/skill/8b09c290-c941-4119-870f-bdafbd78c669\",\r\n   \"mat" +
                        "ches\": {\r\n       \"hiddenLabels\": [],\r\n       \"skill\": [\r\n           \"operate oxy" +
                        "-fuel cutting torch\"\r\n       ],\r\n       \"alternativeLabels\": [\r\n           \"hand" +
                        "le oxy-fuel cutting torch\",\r\n           \"utilise oxy-fuel cutting torch\",\r\n     " +
                        "      \"use oxy-fuel cutting torch\",\r\n           \"run oxy-fuel cutting torch\"\r\n  " +
                        "     ]\r\n   },\r\n   \"skillReusability\": \"cross-sectoral\"\r\n},\r\n{\r\n   \"skillType\": \"" +
                        "competency\",\r\n   \"skill\": \"operate oxy-fuel welding torch\",\r\n   \"lastModified\": " +
                        "\"2016-12-20T19:50:07Z\",\r\n   \"alternativeLabels\": [\r\n       \"operate oxyacetylene" +
                        " gas equipment\",\r\n       \"use oxy-fuel welding torch equipment\",\r\n       \"use ox" +
                        "yacetylene gas equipment\",\r\n       \"utilise oxy-fuel welding torch equipment\",\r\n" +
                        "       \"run oxy-fuel welding torch equipment\",\r\n       \"handle oxy-fuel welding " +
                        "torch equipment\",\r\n       \"handle oxyacetylene gas equipment\",\r\n       \"utilise " +
                        "oxyacetylene gas equipment\"\r\n   ],\r\n   \"uri\": \"http://data.europa.eu/esco/skill/" +
                        "14b4a40e-da80-452a-86d6-88a959052219\",\r\n   \"matches\": {\r\n       \"hiddenLabels\": " +
                        "[],\r\n       \"skill\": [\r\n           \"operate oxy-fuel welding torch\"\r\n       ],\r\n" +
                        "       \"alternativeLabels\": [\r\n           \"use oxy-fuel welding torch equipment\"" +
                        ",\r\n           \"utilise oxy-fuel welding torch equipment\",\r\n           \"run oxy-f" +
                        "uel welding torch equipment\",\r\n           \"handle oxy-fuel welding torch equipme" +
                        "nt\"\r\n       ]\r\n   },\r\n   \"skillReusability\": \"cross-sectoral\"\r\n},\r\n{\r\n   \"skillT" +
                        "ype\": \"competency\",\r\n   \"skill\": \"operate oxygen cutting torch\",\r\n   \"lastModifi" +
                        "ed\": \"2016-12-20T18:23:07Z\",\r\n   \"alternativeLabels\": [\r\n       \"cutting metal w" +
                        "ith oxygen torch\",\r\n       \"metal cutting with oxygen torch\",\r\n       \"oxygen cu" +
                        "tting torch operation\",\r\n       \"operating oxygen cutting torch\",\r\n       \"oxyge" +
                        "n torch metal-cutting\",\r\n       \"cut metal with oxygen torch\",\r\n       \"operatio" +
                        "n of oxygen cutting torch\"\r\n   ],\r\n   \"uri\": \"http://data.europa.eu/esco/skill/d" +
                        "7cab350-7eba-41cf-9c35-827b74541ce8\",\r\n   \"matches\": {\r\n       \"hiddenLabels\": [" +
                        "],\r\n       \"skill\": [\r\n           \"operate oxygen cutting torch\"\r\n       ],\r\n   " +
                        "    \"alternativeLabels\": [\r\n           \"cutting metal with oxygen torch\",\r\n     " +
                        "      \"metal cutting with oxygen torch\",\r\n           \"oxygen cutting torch opera" +
                        "tion\",\r\n           \"operating oxygen cutting torch\",\r\n           \"oxygen torch m" +
                        "etal-cutting\",\r\n           \"cut metal with oxygen torch\",\r\n           \"operation" +
                        " of oxygen cutting torch\"\r\n       ]\r\n   },\r\n   \"skillReusability\": \"sector-speci" +
                        "fic\"\r\n},\r\n{\r\n   \"skillType\": \"competency\",\r\n   \"skill\": \"operate plasma cutting " +
                        "torch\",\r\n   \"lastModified\": \"2016-12-20T18:23:01Z\",\r\n   \"alternativeLabels\": [\r\n" +
                        "       \"operation of plasma cutting torch\",\r\n       \"use plasma cutter\",\r\n      " +
                        " \"plasma torch cutting\",\r\n       \"cut with plasma torch\",\r\n       \"plasma cuttin" +
                        "g torch operation\",\r\n       \"operating plasma cutting torch\",\r\n       \"using pla" +
                        "sma cutter\"\r\n   ],\r\n   \"uri\": \"http://data.europa.eu/esco/skill/f1e122e5-24a8-44" +
                        "c0-bf3f-90044e72370c\",\r\n   \"matches\": {\r\n       \"hiddenLabels\": [],\r\n       \"ski" +
                        "ll\": [\r\n           \"operate plasma cutting torch\"\r\n       ],\r\n       \"alternativ" +
                        "eLabels\": [\r\n           \"operation of plasma cutting torch\",\r\n           \"plasma" +
                        " torch cutting\",\r\n           \"cut with plasma torch\",\r\n           \"plasma cuttin" +
                        "g torch operation\",\r\n           \"operating plasma cutting torch\"\r\n       ]\r\n   }" +
                        ",\r\n   \"skillReusability\": \"sector-specific\"\r\n},\r\n{\r\n   \"skillType\": \"knowledge\"," +
                        "\r\n   \"skill\": \"plasma torches\",\r\n   \"lastModified\": \"2017-01-05T17:04:51Z\",\r\n   " +
                        "\"alternativeLabels\": [\r\n       \"plasma arc incendiaries\",\r\n       \"plasma lamps\"" +
                        ",\r\n       \"plasma beacons\",\r\n       \"plasma arc beacons\",\r\n       \"plasma arc la" +
                        "mps\",\r\n       \"plasma incendiaries\",\r\n       \"plasm lanterns\"\r\n   ],\r\n   \"uri\": " +
                        "\"http://data.europa.eu/esco/skill/3cb0d886-1b34-4941-a134-b84d8a17b8d5\",\r\n   \"ma" +
                        "tches\": {\r\n       \"hiddenLabels\": [],\r\n       \"skill\": [\r\n           \"plasma tor" +
                        "ches\"\r\n       ],\r\n       \"alternativeLabels\": []\r\n   },\r\n   \"skillReusability\": " +
                        "\"occupation-specific\"\r\n}\r\n]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for a full word with alternate labels included")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void SearchForAFullWordWithAlternateLabelsIncluded()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsByLabel",
                    "#@ignore",
                    "todo"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for a full word with alternate labels included", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 222
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 224
testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\" with reques" +
                        "t body", "{\r\n\"label\": \"cocktail\",\r\n\"matchAltLabels\": \"true\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 232
 testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 233
    testRunner.And("the response json matches:", "{\r\n    \"skills\": [\r\n        {\r\n            \"skillType\": \"competency\",\r\n          " +
                        "  \"skill\": \"prepare mixed beverages\",\r\n            \"lastModified\": \"2016-09-15T1" +
                        "0:50:50Z\",\r\n            \"alternativeLabels\": [\r\n                \"serve cocktails" +
                        "\",\r\n                \"prepare a mix of beverages\",\r\n                \"mix and serv" +
                        "e alcoholic and non-alcoholic beverages\"\r\n            ],\r\n            \"uri\": \"ht" +
                        "tp://data.europa.eu/esco/skill/81d5b408-e805-4788-8dbd-42f22e8fd199\",\r\n         " +
                        "   \"matches\": {\r\n                \"hiddenLabels\": [],\r\n                \"skill\": [" +
                        "],\r\n                \"alternativeLabels\": [\r\n                    \"serve cocktails" +
                        "\"\r\n                ]\r\n            },\r\n            \"skillReusability\": \"sector-sp" +
                        "ecific\"\r\n        },\r\n        {\r\n            \"skillType\": \"competency\",\r\n        " +
                        "    \"skill\": \"assemble cocktail garnishes\",\r\n            \"lastModified\": \"2016-0" +
                        "9-15T10:55:54Z\",\r\n            \"alternativeLabels\": [\r\n                \"use diffe" +
                        "rent items to decorate cocktails\",\r\n                \"assemble garnishing for coc" +
                        "ktails\",\r\n                \"choose various items to present cocktails\",\r\n        " +
                        "        \"assemble garnish for cocktails\"\r\n            ],\r\n            \"uri\": \"ht" +
                        "tp://data.europa.eu/esco/skill/f42df0af-c63b-41a7-815f-ab5eb85098e3\",\r\n         " +
                        "   \"matches\": {\r\n                \"hiddenLabels\": [],\r\n                \"skill\": [" +
                        "\r\n                    \"assemble cocktail garnishes\"\r\n                ],\r\n       " +
                        "         \"alternativeLabels\": [\r\n                    \"use different items to dec" +
                        "orate cocktails\",\r\n                    \"assemble garnishing for cocktails\",\r\n   " +
                        "                 \"choose various items to present cocktails\",\r\n                 " +
                        "   \"assemble garnish for cocktails\"\r\n                ]\r\n            },\r\n        " +
                        "    \"skillReusability\": \"sector-specific\"\r\n        }\r\n    ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search where there are no matches")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void SearchWhereThereAreNoMatches()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsByLabel",
                    "#@ignore",
                    "todo"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search where there are no matches", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 286
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 288
testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\" with reques" +
                        "t body", "{\r\n\"label\": \"bincendiari\",\r\n\"matchAltLabels\": \"true\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 296
 testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 297
    testRunner.And("the response json matches:", "{\r\n\"skills\": []\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Alt label search defaults to false")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void AltLabelSearchDefaultsToFalse()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsByLabel",
                    "#@ignore",
                    "todo"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Alt label search defaults to false", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 305
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 307
testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\" with reques" +
                        "t body", "{\r\n\"label\": \"ncendiari\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 314
 testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 315
    testRunner.And("the response json matches:", "{\r\n\"skills\": []\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for that is only in alt labels without allowing alt label search")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void SearchForThatIsOnlyInAltLabelsWithoutAllowingAltLabelSearch()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsByLabel",
                    "#@ignore",
                    "todo"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for that is only in alt labels without allowing alt label search", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 325
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 327
testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\" with reques" +
                        "t body", "{\r\n\"label\": \"ncendiari\",\r\n\"matchAltLabels\": \"false\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 335
 testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 336
    testRunner.And("the response json matches:", "{\r\n\"skills\": []\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search that returns skill with no alt labels")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void SearchThatReturnsSkillWithNoAltLabels()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsByLabel",
                    "#@ignore",
                    "todo"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search that returns skill with no alt labels", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 345
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 347
testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\" with reques" +
                        "t body", "{\r\n\"label\": \"manage budgets\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 354
 testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 355
    testRunner.And("the response json matches:", @"{
""skills"": [
    {
        ""skillType"": ""competency"",
        ""skill"": ""manage budgets"",
        ""lastModified"": ""2016-10-20T15:06:39Z"",
        ""alternativeLabels"": [],
        ""uri"": ""http://data.europa.eu/esco/skill/21c5790c-0930-4d74-b3b0-84caf5af12ea"",
        ""matches"": {
            ""hiddenLabels"": [],
            ""skill"": [
                ""manage budgets""
            ],
            ""alternativeLabels"": []
        },
        ""skillReusability"": ""cross-sectoral""
    },
    {
        ""skillType"": ""competency"",
        ""skill"": ""manage budgets for social services programs"",
        ""lastModified"": ""2016-12-20T19:29:40Z"",
        ""alternativeLabels"": [
            ""plan budgets for social services programmes"",
            ""administer budgets in social services"",
            ""manage budget for social services programme"",
            ""manage budget for social services programs"",
            ""manage budgets for social services programmes""
        ],
        ""uri"": ""http://data.europa.eu/esco/skill/d4eaa90c-598f-4453-a0b8-28345ba63bf2"",
        ""matches"": {
            ""hiddenLabels"": [],
            ""skill"": [
                ""manage budgets for social services programs""
            ],
            ""alternativeLabels"": [
                ""manage budgets for social services programmes""
            ]
        },
        ""skillReusability"": ""sector-specific""
    }
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Alt label value is supplied as parameter")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void AltLabelValueIsSuppliedAsParameter()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsByLabel",
                    "#@ignore",
                    "todo"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Alt label value is supplied as parameter", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 404
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 406
testRunner.Given("I want to supply \"?matchAltLabels=true\" as a parameter in the following request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 407
testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\" with reques" +
                        "t body", "{\r\n\"label\": \"cocktail\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 414
 testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 415
    testRunner.And("the response json matches:", "{\r\n    \"skills\": [\r\n        {\r\n            \"skillType\": \"competency\",\r\n          " +
                        "  \"skill\": \"prepare mixed beverages\",\r\n            \"lastModified\": \"2016-09-15T1" +
                        "0:50:50Z\",\r\n            \"alternativeLabels\": [\r\n                \"serve cocktails" +
                        "\",\r\n                \"prepare a mix of beverages\",\r\n                \"mix and serv" +
                        "e alcoholic and non-alcoholic beverages\"\r\n            ],\r\n            \"uri\": \"ht" +
                        "tp://data.europa.eu/esco/skill/81d5b408-e805-4788-8dbd-42f22e8fd199\",\r\n         " +
                        "   \"matches\": {\r\n                \"hiddenLabels\": [],\r\n                \"skill\": [" +
                        "],\r\n                \"alternativeLabels\": [\r\n                    \"serve cocktails" +
                        "\"\r\n                ]\r\n            },\r\n            \"skillReusability\": \"sector-sp" +
                        "ecific\"\r\n        },\r\n        {\r\n            \"skillType\": \"competency\",\r\n        " +
                        "    \"skill\": \"assemble cocktail garnishes\",\r\n            \"lastModified\": \"2016-0" +
                        "9-15T10:55:54Z\",\r\n            \"alternativeLabels\": [\r\n                \"use diffe" +
                        "rent items to decorate cocktails\",\r\n                \"assemble garnishing for coc" +
                        "ktails\",\r\n                \"choose various items to present cocktails\",\r\n        " +
                        "        \"assemble garnish for cocktails\"\r\n            ],\r\n            \"uri\": \"ht" +
                        "tp://data.europa.eu/esco/skill/f42df0af-c63b-41a7-815f-ab5eb85098e3\",\r\n         " +
                        "   \"matches\": {\r\n                \"hiddenLabels\": [],\r\n                \"skill\": [" +
                        "\r\n                    \"assemble cocktail garnishes\"\r\n                ],\r\n       " +
                        "         \"alternativeLabels\": [\r\n                    \"use different items to dec" +
                        "orate cocktails\",\r\n                    \"assemble garnishing for cocktails\",\r\n   " +
                        "                 \"choose various items to present cocktails\",\r\n                 " +
                        "   \"assemble garnish for cocktails\"\r\n                ]\r\n            },\r\n        " +
                        "    \"skillReusability\": \"sector-specific\"\r\n        }\r\n    ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No body is supplied")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void NoBodyIsSupplied()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsByLabel",
                    "#@ignore",
                    "todo"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No body is supplied", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 471
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "dataItem",
                            "value"});
#line 472
 testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\"", ((string)(null)), table29, "Given ");
#line hidden
#line 474
    testRunner.Then("the response code is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 475
    testRunner.And("the the response message is \"Unable to process supplied parameters\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid body is supplied")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void InvalidBodyIsSupplied()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsByLabel",
                    "#@ignore",
                    "todo"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid body is supplied", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 479
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "dataItem",
                            "value"});
                table30.AddRow(new string[] {
                            "skill",
                            "http://data.europa.eu/esco/skill/4d97e3c3-f335-47cc-a4ee-0d779fd42222"});
#line 480
 testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\"", ((string)(null)), table30, "Given ");
#line hidden
#line 483
    testRunner.Then("the response code is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 484
    testRunner.And("the the response message is \"Unable to process supplied parameters\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid security header is supplied")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void InvalidSecurityHeaderIsSupplied()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsByLabel",
                    "#@ignore",
                    "todo"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid security header is supplied", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 489
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 490
    testRunner.Given("I want to supply an invalid security header", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "dataItem",
                            "value"});
                table31.AddRow(new string[] {
                            "skill",
                            "http://data.europa.eu/esco/skill/4d97e3c3-f335-47cc-a4ee-0d779fd42222"});
#line 491
 testRunner.And("I make a request to the service taxonomy API \"getskillsbylabelsearch\"", ((string)(null)), table31, "And ");
#line hidden
#line 494
    testRunner.Then("the response code is 401", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 495
    testRunner.And("the response json matches:", "   {\r\n   \"statusCode\": 401,\r\n   \"message\": \"Access denied due to invalid subscrip" +
                        "tion key. Make sure to provide a valid key for an active subscription.\"\r\n   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Missing security header")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void MissingSecurityHeader()
        {
            string[] tagsOfScenario = new string[] {
                    "GetSkillsByLabel",
                    "#@ignore",
                    "todo"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Missing security header", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 505
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 506
    testRunner.Given("I want to fail to send a security header", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "dataItem",
                            "value"});
                table32.AddRow(new string[] {
                            "skill",
                            "http://data.europa.eu/esco/skill/4d97e3c3-f335-47cc-a4ee-0d779fd42222"});
#line 507
 testRunner.And("I make a request to the service taxonomy API \"getskillsbylabelsearch\"", ((string)(null)), table32, "And ");
#line hidden
#line 510
    testRunner.Then("the response code is 401", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 511
    testRunner.And("the response json matches:", "   {\r\n   \"statusCode\": 401,\r\n   \"message\": \"Access denied due to missing subscrip" +
                        "tion key. Make sure to include subscription key when making requests to an API.\"" +
                        "\r\n   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

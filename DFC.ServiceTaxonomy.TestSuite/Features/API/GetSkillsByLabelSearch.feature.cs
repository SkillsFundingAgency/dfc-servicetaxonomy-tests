// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFC.ServiceTaxonomy.TestSuite.Features.API
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GetSkillsByLabelSearch")]
    public partial class GetSkillsByLabelSearchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GetSkillsByLabelSearch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GetSkillsByLabelSearch", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for a full word")]
        public virtual void SearchForAFullWord()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for a full word", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
#line 6
testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\" with reques" +
                    "t body", "{\r\n  \"label\": \"torch\",\r\n  \"matchAltLabels\": \"true\"\r\n}\r\n", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
    testRunner.And("the response json matches:", "{\r\n\"skills\": [\r\n{\r\n   \"skillType\": \"knowledge\",\r\n   \"skill\": \"torch temperature f" +
                    "or metal processes\",\r\n   \"lastModified\": \"2017-01-05T13:52:33Z\",\r\n   \"alternativ" +
                    "eLabels\": [\r\n       \"torch temperature for metal working\",\r\n       \"torch temper" +
                    "ature for metal procedures\",\r\n       \"correct heat for machine and tool operatio" +
                    "ns\",\r\n       \"torch temperature for metal operations\",\r\n       \"correct heat for" +
                    " machine and tool working\",\r\n       \"torch temperature for metal activities\",\r\n " +
                    "      \"correct heat for machine and tool activities\",\r\n       \"correct heat for " +
                    "machine and tool procedures\"\r\n   ],\r\n   \"uri\": \"http://data.europa.eu/esco/skill" +
                    "/46f2796e-e1b8-4210-95e2-d9a89af956e7\",\r\n   \"matches\": {\r\n       \"hiddenLabels\":" +
                    " [],\r\n       \"skill\": [\r\n           \"torch temperature for metal processes\"\r\n   " +
                    "    ],\r\n       \"alternativeLabels\": [\r\n           \"torch temperature for metal w" +
                    "orking\",\r\n           \"torch temperature for metal procedures\",\r\n           \"torc" +
                    "h temperature for metal operations\",\r\n           \"torch temperature for metal ac" +
                    "tivities\"\r\n       ]\r\n   },\r\n   \"skillReusability\": \"cross-sectoral\"\r\n},\r\n{\r\n   \"" +
                    "skillType\": \"competency\",\r\n   \"skill\": \"operate oxy-fuel cutting torch\",\r\n   \"la" +
                    "stModified\": \"2016-12-20T19:48:21Z\",\r\n   \"alternativeLabels\": [\r\n       \"utilise" +
                    " oxyacetylene cutter\",\r\n       \"handle oxy-fuel cutting torch\",\r\n       \"utilise" +
                    " oxy-fuel cutting torch\",\r\n       \"use oxy-fuel cutting torch\",\r\n       \"run oxy" +
                    "-fuel cutting torch\",\r\n       \"use oxyacetylene cutter\",\r\n       \"handle oxyacet" +
                    "ylene cutter\",\r\n       \"run oxyacetylene cutter\"\r\n   ],\r\n   \"uri\": \"http://data." +
                    "europa.eu/esco/skill/8b09c290-c941-4119-870f-bdafbd78c669\",\r\n   \"matches\": {\r\n  " +
                    "     \"hiddenLabels\": [],\r\n       \"skill\": [\r\n           \"operate oxy-fuel cuttin" +
                    "g torch\"\r\n       ],\r\n       \"alternativeLabels\": [\r\n           \"handle oxy-fuel " +
                    "cutting torch\",\r\n           \"utilise oxy-fuel cutting torch\",\r\n           \"use o" +
                    "xy-fuel cutting torch\",\r\n           \"run oxy-fuel cutting torch\"\r\n       ]\r\n   }" +
                    ",\r\n   \"skillReusability\": \"cross-sectoral\"\r\n},\r\n{\r\n   \"skillType\": \"competency\"," +
                    "\r\n   \"skill\": \"operate oxy-fuel welding torch\",\r\n   \"lastModified\": \"2016-12-20T" +
                    "19:50:07Z\",\r\n   \"alternativeLabels\": [\r\n       \"operate oxyacetylene gas equipme" +
                    "nt\",\r\n       \"use oxy-fuel welding torch equipment\",\r\n       \"use oxyacetylene g" +
                    "as equipment\",\r\n       \"utilise oxy-fuel welding torch equipment\",\r\n       \"run " +
                    "oxy-fuel welding torch equipment\",\r\n       \"handle oxy-fuel welding torch equipm" +
                    "ent\",\r\n       \"handle oxyacetylene gas equipment\",\r\n       \"utilise oxyacetylene" +
                    " gas equipment\"\r\n   ],\r\n   \"uri\": \"http://data.europa.eu/esco/skill/14b4a40e-da8" +
                    "0-452a-86d6-88a959052219\",\r\n   \"matches\": {\r\n       \"hiddenLabels\": [],\r\n       " +
                    "\"skill\": [\r\n           \"operate oxy-fuel welding torch\"\r\n       ],\r\n       \"alte" +
                    "rnativeLabels\": [\r\n           \"use oxy-fuel welding torch equipment\",\r\n         " +
                    "  \"utilise oxy-fuel welding torch equipment\",\r\n           \"run oxy-fuel welding " +
                    "torch equipment\",\r\n           \"handle oxy-fuel welding torch equipment\"\r\n       " +
                    "]\r\n   },\r\n   \"skillReusability\": \"cross-sectoral\"\r\n},\r\n{\r\n   \"skillType\": \"compe" +
                    "tency\",\r\n   \"skill\": \"operate oxygen cutting torch\",\r\n   \"lastModified\": \"2016-1" +
                    "2-20T18:23:07Z\",\r\n   \"alternativeLabels\": [\r\n       \"cutting metal with oxygen t" +
                    "orch\",\r\n       \"metal cutting with oxygen torch\",\r\n       \"oxygen cutting torch " +
                    "operation\",\r\n       \"operating oxygen cutting torch\",\r\n       \"oxygen torch meta" +
                    "l-cutting\",\r\n       \"cut metal with oxygen torch\",\r\n       \"operation of oxygen " +
                    "cutting torch\"\r\n   ],\r\n   \"uri\": \"http://data.europa.eu/esco/skill/d7cab350-7eba" +
                    "-41cf-9c35-827b74541ce8\",\r\n   \"matches\": {\r\n       \"hiddenLabels\": [],\r\n       \"" +
                    "skill\": [\r\n           \"operate oxygen cutting torch\"\r\n       ],\r\n       \"alterna" +
                    "tiveLabels\": [\r\n           \"cutting metal with oxygen torch\",\r\n           \"metal" +
                    " cutting with oxygen torch\",\r\n           \"oxygen cutting torch operation\",\r\n    " +
                    "       \"operating oxygen cutting torch\",\r\n           \"oxygen torch metal-cutting" +
                    "\",\r\n           \"cut metal with oxygen torch\",\r\n           \"operation of oxygen c" +
                    "utting torch\"\r\n       ]\r\n   },\r\n   \"skillReusability\": \"sector-specific\"\r\n},\r\n{\r" +
                    "\n   \"skillType\": \"competency\",\r\n   \"skill\": \"operate plasma cutting torch\",\r\n   " +
                    "\"lastModified\": \"2016-12-20T18:23:01Z\",\r\n   \"alternativeLabels\": [\r\n       \"oper" +
                    "ation of plasma cutting torch\",\r\n       \"use plasma cutter\",\r\n       \"plasma tor" +
                    "ch cutting\",\r\n       \"cut with plasma torch\",\r\n       \"plasma cutting torch oper" +
                    "ation\",\r\n       \"operating plasma cutting torch\",\r\n       \"using plasma cutter\"\r" +
                    "\n   ],\r\n   \"uri\": \"http://data.europa.eu/esco/skill/f1e122e5-24a8-44c0-bf3f-9004" +
                    "4e72370c\",\r\n   \"matches\": {\r\n       \"hiddenLabels\": [],\r\n       \"skill\": [\r\n    " +
                    "       \"operate plasma cutting torch\"\r\n       ],\r\n       \"alternativeLabels\": [\r" +
                    "\n           \"operation of plasma cutting torch\",\r\n           \"plasma torch cutti" +
                    "ng\",\r\n           \"cut with plasma torch\",\r\n           \"plasma cutting torch oper" +
                    "ation\",\r\n           \"operating plasma cutting torch\"\r\n       ]\r\n   },\r\n   \"skill" +
                    "Reusability\": \"sector-specific\"\r\n},\r\n{\r\n   \"skillType\": \"knowledge\",\r\n   \"skill\"" +
                    ": \"plasma torches\",\r\n   \"lastModified\": \"2017-01-05T17:04:51Z\",\r\n   \"alternative" +
                    "Labels\": [\r\n       \"plasma arc incendiaries\",\r\n       \"plasma lamps\",\r\n       \"p" +
                    "lasma beacons\",\r\n       \"plasma arc beacons\",\r\n       \"plasma arc lamps\",\r\n     " +
                    "  \"plasma incendiaries\",\r\n       \"plasm lanterns\"\r\n   ],\r\n   \"uri\": \"http://data" +
                    ".europa.eu/esco/skill/3cb0d886-1b34-4941-a134-b84d8a17b8d5\",\r\n   \"matches\": {\r\n " +
                    "      \"hiddenLabels\": [],\r\n       \"skill\": [\r\n           \"plasma torches\"\r\n     " +
                    "  ],\r\n       \"alternativeLabels\": []\r\n   },\r\n   \"skillReusability\": \"occupation-" +
                    "specific\"\r\n}\r\n]\r\n}         ", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for a partial word")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void SearchForAPartialWord()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for a partial word", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 195
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
#line 197
testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\" with reques" +
                    "t body", "{\r\n\"label\": \"ncendiari\",\r\n\"matchAltLabels\": \"true\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 205
 testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 206
    testRunner.And("the response json matches:", "{\r\n\"skills\": []\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for a full word with alternate labels included")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void SearchForAFullWordWithAlternateLabelsIncluded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for a full word with alternate labels included", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 214
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
#line 216
testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\" with reques" +
                    "t body", "{\r\n\"label\": \"cocktail\",\r\n\"matchAltLabels\": \"true\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 224
 testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 225
    testRunner.And("the response json matches:", @"{
    ""skills"": [
        {
            ""skillType"": ""competency"",
            ""skill"": ""assemble cocktail garnishes"",
            ""lastModified"": ""2016-09-15T10:55:54Z"",
            ""alternativeLabels"": [
                ""use different items to decorate cocktails"",
                ""assemble garnishing for cocktails"",
                ""choose various items to present cocktails"",
                ""assemble garnish for cocktails""
            ],
            ""uri"": ""http://data.europa.eu/esco/skill/f42df0af-c63b-41a7-815f-ab5eb85098e3"",
            ""matches"": {
                ""hiddenLabels"": [],
                ""skill"": [
                    ""assemble cocktail garnishes""
                ],
                ""alternativeLabels"": [
                    ""use different items to decorate cocktails"",
                    ""assemble garnishing for cocktails"",
                    ""choose various items to present cocktails"",
                    ""assemble garnish for cocktails""
                ]
            },
            ""skillReusability"": ""sector-specific""
        }
    ]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search where there are no matches")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void SearchWhereThereAreNoMatches()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search where there are no matches", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 259
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
#line 261
testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\" with reques" +
                    "t body", "{\r\n\"label\": \"bincendiari\",\r\n\"matchAltLabels\": \"true\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 269
 testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 270
    testRunner.And("the response json matches:", "{\r\n\"skills\": []\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Alt label search defaults to false")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void AltLabelSearchDefaultsToFalse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Alt label search defaults to false", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 278
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
#line 280
testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\" with reques" +
                    "t body", "{\r\n\"label\": \"ncendiari\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 287
 testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 288
    testRunner.And("the response json matches:", "{\r\n\"skills\": []\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for that is only in alt labels without allowing alt label search")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void SearchForThatIsOnlyInAltLabelsWithoutAllowingAltLabelSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for that is only in alt labels without allowing alt label search", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 298
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
#line 300
testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\" with reques" +
                    "t body", "{\r\n\"label\": \"ncendiari\",\r\n\"matchAltLabels\": \"false\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 308
 testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 309
    testRunner.And("the response json matches:", "{\r\n\"skills\": []\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search that returns skill with no alt labels")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void SearchThatReturnsSkillWithNoAltLabels()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search that returns skill with no alt labels", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 318
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
#line 320
testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\" with reques" +
                    "t body", "{\r\n\"label\": \"manage budgets\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 327
 testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 328
    testRunner.And("the response json matches:", @"{
""skills"": [
    {
        ""skillType"": ""competency"",
        ""skill"": ""manage budgets"",
        ""lastModified"": ""2016-10-20T15:06:39Z"",
        ""alternativeLabels"": [],
        ""uri"": ""http://data.europa.eu/esco/skill/21c5790c-0930-4d74-b3b0-84caf5af12ea"",
        ""matches"": {
            ""hiddenLabels"": [],
            ""skill"": [
                ""manage budgets""
            ],
            ""alternativeLabels"": []
        },
        ""skillReusability"": ""cross-sectoral""
    },
    {
        ""skillType"": ""competency"",
        ""skill"": ""manage budgets for social services programs"",
        ""lastModified"": ""2016-12-20T19:29:40Z"",
        ""alternativeLabels"": [
            ""plan budgets for social services programmes"",
            ""administer budgets in social services"",
            ""manage budget for social services programme"",
            ""manage budget for social services programs"",
            ""manage budgets for social services programmes""
        ],
        ""uri"": ""http://data.europa.eu/esco/skill/d4eaa90c-598f-4453-a0b8-28345ba63bf2"",
        ""matches"": {
            ""hiddenLabels"": [],
            ""skill"": [
                ""manage budgets for social services programs""
            ],
            ""alternativeLabels"": [
                ""manage budgets for social services programmes""
            ]
        },
        ""skillReusability"": ""sector-specific""
    }
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Alt label value is supplied as parameter")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void AltLabelValueIsSuppliedAsParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Alt label value is supplied as parameter", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 377
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 379
testRunner.Given("I want to supply \"?matchAltLabels=true\" as a parameter in the following request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 380
testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\" with reques" +
                    "t body", "{\r\n\"label\": \"cocktail\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 387
 testRunner.Then("the response code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 388
    testRunner.And("the response json matches:", @"{
    ""skills"": [
        {
            ""skillType"": ""competency"",
            ""skill"": ""assemble cocktail garnishes"",
            ""lastModified"": ""2016-09-15T10:55:54Z"",
            ""alternativeLabels"": [
                ""use different items to decorate cocktails"",
                ""assemble garnishing for cocktails"",
                ""choose various items to present cocktails"",
                ""assemble garnish for cocktails""
            ],
            ""uri"": ""http://data.europa.eu/esco/skill/f42df0af-c63b-41a7-815f-ab5eb85098e3"",
            ""matches"": {
                ""hiddenLabels"": [],
                ""skill"": [
                    ""assemble cocktail garnishes""
                ],
                ""alternativeLabels"": [
                    ""use different items to decorate cocktails"",
                    ""assemble garnishing for cocktails"",
                    ""choose various items to present cocktails"",
                    ""assemble garnish for cocktails""
                ]
            },
            ""skillReusability"": ""sector-specific""
        }
    ]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No body is supplied")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void NoBodyIsSupplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No body is supplied", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 425
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "dataItem",
                        "value"});
#line 426
 testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\"", ((string)(null)), table14, "Given ");
#line 428
    testRunner.Then("the response code is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 429
    testRunner.And("the the response message is \"Unable to process supplied parameters\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid body is supplied")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void InvalidBodyIsSupplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid body is supplied", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 433
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "dataItem",
                        "value"});
            table15.AddRow(new string[] {
                        "skill",
                        "http://data.europa.eu/esco/skill/4d97e3c3-f335-47cc-a4ee-0d779fd42222"});
#line 434
 testRunner.Given("I make a request to the service taxonomy API \"getskillsbylabelsearch\"", ((string)(null)), table15, "Given ");
#line 437
    testRunner.Then("the response code is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 438
    testRunner.And("the the response message is \"Unable to process supplied parameters\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid security header is supplied")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void InvalidSecurityHeaderIsSupplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid security header is supplied", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 443
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 444
    testRunner.Given("I want to supply an invalid security header", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "dataItem",
                        "value"});
            table16.AddRow(new string[] {
                        "skill",
                        "http://data.europa.eu/esco/skill/4d97e3c3-f335-47cc-a4ee-0d779fd42222"});
#line 445
 testRunner.And("I make a request to the service taxonomy API \"getskillsbylabelsearch\"", ((string)(null)), table16, "And ");
#line 448
    testRunner.Then("the response code is 401", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 449
    testRunner.And("the response json matches:", "   {\r\n   \"statusCode\": 401,\r\n   \"message\": \"Access denied due to invalid subscrip" +
                    "tion key. Make sure to provide a valid key for an active subscription.\"\r\n   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Missing security header")]
        [NUnit.Framework.CategoryAttribute("GetSkillsByLabel")]
        [NUnit.Framework.CategoryAttribute("#@ignore")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public virtual void MissingSecurityHeader()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Missing security header", null, new string[] {
                        "GetSkillsByLabel",
                        "#@ignore",
                        "todo"});
#line 459
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 460
    testRunner.Given("I want to fail to send a security header", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "dataItem",
                        "value"});
            table17.AddRow(new string[] {
                        "skill",
                        "http://data.europa.eu/esco/skill/4d97e3c3-f335-47cc-a4ee-0d779fd42222"});
#line 461
 testRunner.And("I make a request to the service taxonomy API \"getskillsbylabelsearch\"", ((string)(null)), table17, "And ");
#line 464
    testRunner.Then("the response code is 401", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 465
    testRunner.And("the response json matches:", "   {\r\n   \"statusCode\": 401,\r\n   \"message\": \"Access denied due to missing subscrip" +
                    "tion key. Make sure to include subscription key when making requests to an API.\"" +
                    "\r\n   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
